
[{"content":"\rGo 语言历史 #\rGo 语言基础 #\rGo 语言进阶 #\rGo 语言高级 #\rGo 面试准备 #\r","date":"2024-06-22","externalUrl":null,"permalink":"/posts/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","section":"Posts","summary":"","title":"Go学习笔记","type":"posts"},{"content":"","date":"2024-06-22","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2024-06-22","externalUrl":null,"permalink":"/","section":"Sizeskong Blog","summary":"","title":"Sizeskong Blog","type":"page"},{"content":"","date":"2024-06-20","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"\rHugo官网 #\r官网地址：https://gohugo.io/\n中文地址：https://www.gohugo.org/doc/\nWindows 手动安装 Hugo #\rGit 下载地址：https://git-scm.com/downloads\nGo 下载地址：https://golang.google.cn/dl/\nHugo 下载地址：https://github.com/gohugoio/hugo/releases\nDart Sass 下载：https://github.com/sass/dart-sass/releases/\n下载完解压到自己指定的目录，然后配置到环境变量中。注意：解压后的文件名字可以随便改。\n例如：我解压到 D:\\Environment\\Hugo 目录下 有 hugo 和 sass 两个文件\n配置环境变量 #\r此电脑——右击属性——高级系统设置——环境变量——双击Path——新建——添加刚才的两个目录\n注意：我这里选择的是用户变量，也可以选择系统变量！\n例如：D:\\Environment\\Hugo\\hugo 和 D:\\Environment\\Hugo\\sass\n检测是否安装成功 #\r# 查看当前版本 hugo version # 查看环境 hugo env 到此安装成功！\n创建自己的博客项目 #\r# 创建项目文件 hugo new Site KongBlog # 进入项目目录 cd KongBlog # 初始化 git 仓库 git init # 安装主题 git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish # 注意：主题下载完后，删除项目根目录下生成的 hugo.toml 文件，把主题中的 config 文件 拷贝到项目根目录下 # 项目根目录：KongBlog # 主题的目录：KongBlog\\themes\\blowfish\\config ## 注意：这里要去项目根目录下的 config\\_default\\hugo.toml 文件中 设置主题配置，去掉注释即可。 # 设置主题 theme = \u0026#39;Blowfish\u0026#39; # 创建文章内容 # hugo new 一级目录/文章标题/index.md # 注意：markdown文件必须以index命名 # 目的：让图片资源与文章内容在同一目录下，方便管理！ hugo new posts/Hugo博客搭建/index.md # 打开 content\\posts\\Hugo博客搭建\\index.md 文件，把 draft = true 改成 false 启动后就可以看到文章 # draft = true 是草稿的意思，不会显示。 # draft = false 是发布的意思，会显示。 # 生成静态资源 public 目录（网页显示的内容） hugo # 启动 hugo server 设置主题的配置文件 #\rBlowfish 主题官网文档：https://blowfish.page/zh-cn/docs/\n主题下载完后，删除项目根目录下自动生成的 hugo.toml 文件，把主题中的 config 文件 拷贝到项目根目录下。\n主题目录：themes\\blowfish\\config\n项目根目录：KongBlog\n一旦你复制了这些文件，你的 config 目录看起来应该是这样：\nconfig/_default/ ├─ hugo.toml ├─ languages.en.toml ├─ markup.toml # 不需要配置 ├─ menus.en.toml ├─ module.toml # 不需要配置 └─ params.toml 注意：在 hugo.toml 中，打开 theme = \u0026ldquo;blowfish\u0026rdquo; 注释，即可使用主题。\n如果想要以下这个效果，可以把下面的配置信息复制到自己的配置文件中！\n如果不想使用如下效果，可以参考主题官网进行配置！\n我的主题效果展示 #\r我的配置文件信息 #\r中英文切换，需要创建两个文件，一个中文的 index.md ，一个英文的 index.en.md。\n中英文文件目录：content\\posts\\文章标题\\index.md 和 index.en.md\n如果不想显示中英文切换，只默认以中文显示，把英文配置文件删掉即可。\nhugo.toml 配置 #\r# -- Site Configuration -- # Refer to the theme docs for more details about each of these parameters. # https://blowfish.page/docs/getting-started/ # 主题 theme = \u0026#34;blowfish\u0026#34; # 访问地址(改成自己的地址) baseURL = \u0026#34;http://localhost:1313/\u0026#34; # 默认内容语言 defaultContentLanguage = \u0026#34;zh-cn\u0026#34; # 开启的字数和阅读时间 hasCJKLanguage = true # pluralizeListTitles = \u0026#34;true\u0026#34; # hugo function useful for non-english languages, find out more in https://gohugo.io/getting-started/configuration/#pluralizelisttitles enableRobotsTXT = true paginate = 10 summaryLength = 0 buildDrafts = false buildFuture = false enableEmoji = true # googleAnalytics = \u0026#34;G-XXXXXXXXX\u0026#34; [imaging] anchor = \u0026#39;Center\u0026#39; [taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; author = \u0026#34;authors\u0026#34; series = \u0026#34;series\u0026#34; [sitemap] changefreq = \u0026#39;daily\u0026#39; filename = \u0026#39;sitemap.xml\u0026#39; priority = 0.5 [outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] [related] threshold = 0 toLower = false [[related.indices]] name = \u0026#34;tags\u0026#34; weight = 100 [[related.indices]] name = \u0026#34;categories\u0026#34; weight = 100 [[related.indices]] name = \u0026#34;series\u0026#34; weight = 50 [[related.indices]] name = \u0026#34;authors\u0026#34; weight = 20 [[related.indices]] name = \u0026#34;date\u0026#34; weight = 10 [[related.indices]] applyFilter = false name = \u0026#39;fragmentrefs\u0026#39; type = \u0026#39;fragments\u0026#39; weight = 10 languages.en.toml 配置 #\rlanguageCode = \u0026#34;en\u0026#34; languageName = \u0026#34;English\u0026#34; weight = 2 # 网页标题 title = \u0026#34;Sizeskong Blog\u0026#34; [params] displayName = \u0026#34;English\u0026#34; isoCode = \u0026#34;en\u0026#34; rtl = false dateFormat = \u0026#34;2 January 2006\u0026#34; # logo = \u0026#34;img/logo.png\u0026#34; # secondaryLogo = \u0026#34;img/secondary-logo.png\u0026#34; # description = \u0026#34;My awesome website\u0026#34; # copyright = \u0026#34;Copy, _right?_ :thinking_face:\u0026#34; # 作者信息 [author] name = \u0026#34;Sizeskong\u0026#34; image = \u0026#34;img/avatar.jpg\u0026#34; #headline = \u0026#34;一个强大、轻量级的 Hugo 主题。\u0026#34; #bio = \u0026#34;一个强大、轻量级的 Hugo 主题。\u0026#34; #links = [ # { x-twitter = \u0026#34;https://twitter.com/burufugu\u0026#34; }, # { github = \u0026#34;https://github.com/sizeskong\u0026#34; }, #] languages.zh-cn.toml 配置 #\r# 语言代码 languageCode = \u0026#34;zh-cn\u0026#34; # 语言的名称 languageName = \u0026#34;简体中文\u0026#34; # 语言权重顺序 weight = 1 # 网页标题 title = \u0026#34;Sizeskong Blog\u0026#34; # 语言在网站中的展示名 [params] displayName = \u0026#34;简体中文\u0026#34; isoCode = \u0026#34;zh-cn\u0026#34; rtl = false dateFormat = \u0026#34;2006-01-02\u0026#34; # logo = \u0026#34;img/logo.png\u0026#34; # secondaryLogo = \u0026#34;img/secondary-logo.png\u0026#34; # description = \u0026#34;My awesome website\u0026#34; # copyright = \u0026#34;Copy, _right?_ :thinking_face:\u0026#34; # 作者信息 [author] name = \u0026#34;Sizeskong\u0026#34; image = \u0026#34;img/avatar.jpg\u0026#34; #headline = \u0026#34;一个强大、轻量级的 Hugo 主题。\u0026#34; #bio = \u0026#34;一个强大、轻量级的 Hugo 主题。\u0026#34; #links = [ # { x-twitter = \u0026#34;https://twitter.com/burufugu\u0026#34; }, # { github = \u0026#34;https://github.com/sizeskong\u0026#34; }, #] menus.en.toml 配置 #\r# -- Main Menu -- # The main menu is displayed in the header at the top of the page. # Acceptable parameters are name, pageRef, page, url, title, weight. # # The simplest menu configuration is to provide: # name = The name to be displayed for this menu link # pageRef = The identifier of the page or section to link to # # By default the menu is ordered alphabetically. This can be # overridden by providing a weight value. The menu will then be # ordered by weight from lowest to highest. [[main]] name = \u0026#34;Home\u0026#34; # pre = \u0026#34;bars\u0026#34; pageRef = \u0026#34;/\u0026#34; weight = 10 [[main]] name = \u0026#34;Archives\u0026#34; pageRef = \u0026#34;/posts\u0026#34; weight = 20 [[main]] name = \u0026#34;Tags\u0026#34; pageRef = \u0026#34;tags\u0026#34; weight = 30 # 主菜单 [[main]] name = \u0026#34;StudyNotes\u0026#34; pageRef = \u0026#34;studyNotes\u0026#34; weight = 40 # 子菜单 [[main]] name = \u0026#34;Go\u0026#34; parent = \u0026#34;StudyNotes\u0026#34; pageRef = \u0026#34;Go\u0026#34; weight = 10 [[main]] name = \u0026#34;MySQL\u0026#34; parent = \u0026#34;StudyNotes\u0026#34; pageRef = \u0026#34;MySQL\u0026#34; weight = 20 [[main]] name = \u0026#34;About\u0026#34; pageRef = \u0026#34;about\u0026#34; weight = 50 [[main]] pre = \u0026#34;github\u0026#34; name = \u0026#34;GitHub\u0026#34; url = \u0026#34;https://github.com/sizeskong\u0026#34; weight = 70 #[[main]] # name = \u0026#34;example sub-menu 1\u0026#34; # parent = \u0026#34;Parent\u0026#34; # pageRef = \u0026#34;posts\u0026#34; # weight = 20 #[[main]] # name = \u0026#34;example sub-menu 2\u0026#34; # parent = \u0026#34;Parent\u0026#34; # pageRef = \u0026#34;posts\u0026#34; # weight = 20 #[[subnavigation]] # name = \u0026#34;An interesting topic\u0026#34; # pageRef = \u0026#34;tags/interesting-topic\u0026#34; # weight = 10 #[[subnavigation]] # name = \u0026#34;My Awesome Category\u0026#34; # pre = \u0026#34;github\u0026#34; # pageRef = \u0026#34;categories/awesome\u0026#34; # weight = 20 #[[main]] # name = \u0026#34;Categories\u0026#34; # pageRef = \u0026#34;categories\u0026#34; # weight = 20 #[[main]] # name = \u0026#34;Tags\u0026#34; # pageRef = \u0026#34;tags\u0026#34; # weight = 30 # -- Footer Menu -- # The footer menu is displayed at the bottom of the page, just before # the copyright notice. Configure as per the main menu above. # [[footer]] # name = \u0026#34;Tags\u0026#34; # pageRef = \u0026#34;tags\u0026#34; # weight = 10 # [[footer]] # name = \u0026#34;Categories\u0026#34; # pageRef = \u0026#34;categories\u0026#34; # weight = 20 menus.zh-cn.toml 配置 #\r# -- Main Menu -- # The main menu is displayed in the header at the top of the page. # Acceptable parameters are name, pageRef, page, url, title, weight. # # The simplest menu configuration is to provide: # name = The name to be displayed for this menu link # pageRef = The identifier of the page or section to link to # # By default the menu is ordered alphabetically. This can be # overridden by providing a weight value. The menu will then be # ordered by weight from lowest to highest. [[main]] name = \u0026#34;首页\u0026#34; # pre = \u0026#34;bars\u0026#34; pageRef = \u0026#34;/\u0026#34; weight = 10 [[main]] name = \u0026#34;归档\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 20 [[main]] name = \u0026#34;标签\u0026#34; pageRef = \u0026#34;tags\u0026#34; weight = 30 # 主菜单 [[main]] name = \u0026#34;知识\u0026#34; pageRef = \u0026#34;studyNotes\u0026#34; weight = 40 # 子菜单 [[main]] name = \u0026#34;Go知识\u0026#34; parent = \u0026#34;知识\u0026#34; pageRef = \u0026#34;Go\u0026#34; weight = 10 [[main]] name = \u0026#34;MySQL知识\u0026#34; parent = \u0026#34;知识\u0026#34; pageRef = \u0026#34;MySQL\u0026#34; weight = 20 [[main]] name = \u0026#34;关于\u0026#34; pageRef = \u0026#34;about\u0026#34; weight = 50 [[main]] pre = \u0026#34;github\u0026#34; name = \u0026#34;GitHub\u0026#34; url = \u0026#34;https://github.com/sizeskong\u0026#34; weight = 70 #[[main]] # name = \u0026#34;example sub-menu 1\u0026#34; # parent = \u0026#34;Parent\u0026#34; # pageRef = \u0026#34;posts\u0026#34; # weight = 20 #[[main]] # name = \u0026#34;example sub-menu 2\u0026#34; # parent = \u0026#34;Parent\u0026#34; # pageRef = \u0026#34;posts\u0026#34; # weight = 20 #[[subnavigation]] # name = \u0026#34;An interesting topic\u0026#34; # pageRef = \u0026#34;tags/interesting-topic\u0026#34; # weight = 10 #[[subnavigation]] # name = \u0026#34;My Awesome Category\u0026#34; # pre = \u0026#34;github\u0026#34; # pageRef = \u0026#34;categories/awesome\u0026#34; # weight = 20 #[[main]] # name = \u0026#34;Categories\u0026#34; # pageRef = \u0026#34;categories\u0026#34; # weight = 20 #[[main]] # name = \u0026#34;Tags\u0026#34; # pageRef = \u0026#34;tags\u0026#34; # weight = 30 # -- Footer Menu -- # The footer menu is displayed at the bottom of the page, just before # the copyright notice. Configure as per the main menu above. # [[footer]] # name = \u0026#34;Tags\u0026#34; # pageRef = \u0026#34;tags\u0026#34; # weight = 10 # [[footer]] # name = \u0026#34;Categories\u0026#34; # pageRef = \u0026#34;categories\u0026#34; # weight = 20 params.toml 配置 #\r# -- Theme Options -- # These options control how the theme functions and allow you to # customise the display of your website. # # Refer to the theme docs for more details about each of these parameters. # https://blowfish.page/docs/configuration/#theme-parameters # 主题使用的颜色 colorScheme = \u0026#34;blowfish\u0026#34; # 默认的主题外观，可以是 light 或者 dark defaultAppearance = \u0026#34;light\u0026#34; # valid options: light or dark # 主题外观是否根据访问者操作系统的偏好自动切换。设置为 false 会强制网站始终使用 defaultAppearance autoSwitchAppearance = true # 是否开启网站的搜索功能，设为 true 即为启用 enableSearch = true # 是否可以将\u0026lt;code\u0026gt;代码块复制到剪贴板 enableCodeCopy = true # 指定最近文章中应该展示的模块。 如果没有指定，则使用文章数量最多的板块。 # mainSections = [\u0026#34;section1\u0026#34;, \u0026#34;section2\u0026#34;] # 用于支持搜索引擎爬虫如何处理你的网站。 # robots = \u0026#34;\u0026#34; # 禁用图片上所有图片的调整大小和优化功能。 disableImageOptimization = false # 禁用文本类型的标题，对基于 logo 的标题很有用。 disableTextInHeader = true # 设置默认背景图，用于 background 和 hero 布局下的主页 # defaultBackgroundImage = \u0026#34;image.jpg\u0026#34; # 默认用于背景图像 # 设置默认背景图片，用于所有文章的featured图片，可以通过文章目录中的 featured 图片替换。 # defaultFeaturedImage = \u0026#34;IMAGE.jpg\u0026#34; # used as default for featured images in all articles # 当菜单被选择时，标记主菜单中的菜单项。 highlightCurrentMenuArea = true # 开启智能目录，视图中的项目将会被高亮显示。 # smartTOC = true # 当开启智能目录，如果目录级别不再被聚焦时，将会隐藏更深层次的目录。 # smartTOCHideUnfocusedChildren = true [header] layout = \u0026#34;fixed\u0026#34; # valid options: basic, fixed, fixed-fill, fixed-gradient, fixed-fill-blur # 页脚 [footer] showMenu = true # 显示/隐藏页面底部菜单 showCopyright = true # 是否在底部显示 copyright 版权信息 showThemeAttribution = true # 是否在网站底部中显示\u0026#34;powered by\u0026#34; 的主题归属信息 showAppearanceSwitcher = true # 是否在也页面底部显示外观切换器 showScrollToTop = true # 当设置为 true 时，显示返回顶部的箭头按钮 # 主页 [homepage] layout = \u0026#34;profile\u0026#34; # valid options: page, profile, hero, card, background, custom 有效选项：页面、简介、英雄、卡片、背景、自定义 # homepageImage = \u0026#34;image.jpg\u0026#34; # 在 hero 和 card 布局中使用的图像 showRecent = true # 是否在主页展示最新文章列表。 showRecentItems = 6 # 如果将 showRecent 设置为 true，此参数用于显示多少篇文章。如果没有设置或者为0，则默认显示5篇文章 showMoreLink = true # 是否在主页底部添加“显示更多”，该链接会降会用带到一个预定义位置。 showMoreLinkDest = \u0026#34;/posts\u0026#34; # 更多按钮所指向的位置。 cardView = true # 将列表展示为卡片容器。 cardViewScreenWidth = false # 增强列表中卡片的宽度，使其可以占据可用的全部宽度。 layoutBackgroundBlur = true # 向下滚动主页时，是否模糊背景图。 # 文章页 [article] # 是否显示日期。 showDate = true # 缩略图是否会在每个页面中作为 hero 图像显示。 showHero = false # hero 图像的展示样式，可选的参数值有：basic、big、background、thumbAndBackground heroStyle = \u0026#34;background\u0026#34; # 是否展示文章的更新日期。 showDateUpdated = false # 是否在文章底部显示作者框。 showAuthor = false # 作者框显示在每页的底部而不是顶部。 showAuthorBottom = false # 向下滚动文章页时，是否模糊背景图。 layoutBackgroundBlur = true # 在标题和正文之间添加空白区域间隔。 layoutBackgroundHeaderSpace = true # 是否在标题栏显示面包屑导航。 showBreadcrumbs = false # 当使用 --buildDrafts 构建网站时，是否在文章旁边显示草稿 showDraftLabel = true # 是否展示编辑文章的链接。 showEdit = false # 是否默认显示打开系列模块、 seriesOpened = false # 是否在文章标题旁添加锚点。 showHeadingAnchors = true # 是否在文章末尾展示上一篇/下一篇的文章链接。 showPagination = true # 是否翻转下一篇/上一篇文章链接的方向。 invertPagination = false # 是否展示文章的阅读时间。如果你的语言包含 CJK 语言，需要在 config.toml 中开启 hasCJKLanguage 参数。 showReadingTime = true # 是否显示文章的字数。 如果你的语言属于 CJK 语言，需要在 hugo.toml 中开启 hasCJKLanguage 参数。 showWordCount = true # 是否展示文章的目录。 showTableOfContents = true # 为文章显示相关内容。 showRelatedContent = false # 如果启用showRelatedContent，则限制显示相关文章的数量 relatedContentLimit = 3 # 是否显示文章的分类或标签信息。 showTaxonomies = false # 否在文章或列表中显示 authors 分类。这需要开启多个作者 multiple authors 和 authors 分类法。 showAuthorsBadges = false # 是否在文章末尾添加 评论部分 showComments = true # 在文章末尾显示的分享链接。如果没有提供或设置为 false，则不会显示任何分享链接。可用的值包括：“linkedin”、“twitter”、“reddit”、“pinterest”、“facebook”、“email”、“whatsapp” 和 “telegram” # sharingLinks = [ \u0026#34;linkedin\u0026#34;, \u0026#34;twitter\u0026#34;, \u0026#34;reddit\u0026#34;, \u0026#34;pinterest\u0026#34;, \u0026#34;facebook\u0026#34;, \u0026#34;email\u0026#34;, \u0026#34;whatsapp\u0026#34;, \u0026#34;telegram\u0026#34;] # 指定是否激活文章阅读的禅模式，即隐藏常规的界面元素。 showZenMode = true [list] # 缩略图是否会在每个页面中作为 hero 图像显示。 showHero = false # hero 图像的展示样式，可选的参数值有：basic、big、background、thumbAndBackground。 # heroStyle = \u0026#34;background\u0026#34; # 是否在标题栏显示面包屑导航。 showBreadcrumbs = false # 向下滚动列表页时，是否模糊背景图。 layoutBackgroundBlur = true # only used when heroStyle equals background or thumbAndBackground # 在标题和正文之间添加空白区域间隔。 layoutBackgroundHeaderSpace = true # only used when heroStyle equals background # 是否展示目录。 showTableOfContents = false # 是否在列表页显示文章摘要。如果在扉页参数中没有提供摘要，那么将会使用站点配置 中的 summaryLength 参数自动生成一个。 showSummary = false # 是否显示文章阅读量。 showViews = false # 是否显示文章点赞量。 showLikes = false # 是否将每个文章显示未卡片或简单的内联文本。 showCards = false # 是否根据年做聚合。 groupByYear = true # 将列表展示为卡片容器。 cardView = false # 增强列表中卡片的宽度，使其可以占据可用的全部宽度。 cardViewScreenWidth = false # 将项目宽度限制为 prose 以提高可读性。在没有 featurn 图片的时候非常有用。 constrainItemsWidth = false [sitemap] excludedKinds = [\u0026#34;taxonomy\u0026#34;, \u0026#34;term\u0026#34;] # 分类法 [taxonomy] # 是否在分类列表总显示对应的数量。 showTermCount = true # 缩略图是否会在每个页面中作为 hero 图像显示。 showHero = false # hero 图像的展示样式，可选的参数值有：basic、big、background、thumbAndBackground。 # heroStyle = \u0026#34;background\u0026#34; # 是否在标题栏显示面包屑导航。 showBreadcrumbs = false # 是否显示文章阅读量。这需要集成 firebase showViews = false # 是否显示文章点赞量。这需要集成 firebase showLikes = false # 是否显示目录。 showTableOfContents = false # 将列表展示为卡片容器。 cardView = false # 术语 [term] # 缩略图是否会在每个页面中作为 hero 图像显示。 showHero = false # hero 图像的展示样式，可选的参数值有： basic、big、background、thumbAndBackground。 # heroStyle = \u0026#34;background\u0026#34; # valid options: basic, big, background, thumbAndBackground # 是否在标题栏显示面包屑导航。 showBreadcrumbs = false # 是否显示文章阅读量。这需要集成 firebase showViews = false # 是否显示文章点赞量。这需要集成 firebase showLikes = false # 是否显示目录。 showTableOfContents = true # 是否根据年做聚合。 groupByYear = false # 将列表展示为卡片容器。 cardView = false # 增强列表中卡片的宽度，使其可以占据可用的全部宽度。 cardViewScreenWidth = false # 文章阅读点赞量 [firebase] # apiKey = \u0026#34;XXXXXX\u0026#34; # authDomain = \u0026#34;XXXXXX\u0026#34; # projectId = \u0026#34;XXXXXX\u0026#34; # storageBucket = \u0026#34;XXXXXX\u0026#34; # messagingSenderId = \u0026#34;XXXXXX\u0026#34; # appId = \u0026#34;XXXXXX\u0026#34; # measurementId = \u0026#34;XXXXXX\u0026#34; # 支持 Fathom 站点分析平台 [fathomAnalytics] # site = \u0026#34;ABC12345\u0026#34; # domain = \u0026#34;llama.yoursite.com\u0026#34; # 支持 Umami 站点分析平台 [umamiAnalytics] # websiteid = \u0026#34;ABC12345\u0026#34; # domain = \u0026#34;llama.yoursite.com\u0026#34; # buymeacoffee 账号信息。 [buymeacoffee] # identifier = \u0026#34;\u0026#34; # globalWidget = true # globalWidgetMessage = \u0026#34;Hello\u0026#34; # globalWidgetColor = \u0026#34;#FFDD00\u0026#34; # globalWidgetPosition = \u0026#34;Right\u0026#34; # 验证 [verification] # google = \u0026#34;\u0026#34; # bing = \u0026#34;\u0026#34; # pinterest = \u0026#34;\u0026#34; # yandex = \u0026#34;\u0026#34; Hugo图片显示 #\r目的：让图片资源与文章内容在同一目录下，方便管理。\n创建文章时，设置文章路径\nhugo new 一级目录/文章标题/index.md 注意：Markdown 文件必须以 index 命名\n打开 Typora——文件——偏好设置——图像，设置内容如下：\n目录结构：\nHugo 自动部署到 Github Pages #\r这里使用的是分支部署，用 main 分支来存储源文件，用 gh-pages 来作为网页发布源。如果嫌麻烦，也可以直接使用官网的配置进行部署。官网部署\n1、创建仓库 #\r2、创建分支 #\r3、设置网页发布源 #\r4、域名解析（域名自行购买） #\r进入解析界面 添加记录 记录类型选择 CNAME 选择主机记录，根据提示自行选择 解析请求来源默认 记录值填写 GitHub Pages 上的域名，例如：username.github.io 确认 示例：\n5、绑定解析的域名 #\r打开 Github 自己博客的项目，点击 settings 进入设置界面 下翻到 Pages 目录，进入 Github Pages 下的 Custom domain ，填入刚解析的域名 勾选 Enforce HTTPS ，使用 HTTPS 保护 GitHub Pages 网站的信息（默认自动勾选）。 点击 Save 示例：\n6、克隆仓库到本地 #\r克隆项目地址\n克隆仓库到本地的文件目录\n7、打开自己的博客项目 #\r把 克隆到本地目录中的文件 复制到 自己的博客项目中\n8、创建 Actions 工作流 #\r在项目根目录下创建.github/workflows/ 的目录，并以 .yml 后缀命名，内容如下：\n# .github/workflows/hugo.yml name: GitHub Pages on: push: branches: - main # 设置要部署的分支 jobs: deploy: runs-on: ubuntu-latest concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: Checkout uses: actions/checkout@v4 # 官网：https://github.com/actions/checkout with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 # 官网：https://github.com/peaceiris/actions-hugo with: hugo-version: \u0026#34;0.127.0\u0026#34; # 当前使用的版本 hugo version 查看 - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v4 # 官网：https://github.com/peaceiris/actions-gh-pages if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.HUGO_TOKEN }} publish_branch: gh-pages # 设置用作 GitHub Pages 分支的分支名称。默认为 gh-pages。 publish_dir: ./public # 把 public 文件里的内容，部署到 gh-pages 分支上 9、创建令牌 #\r点击 Github 用户头像 选择 Settings 左侧找到 Developer settings 选择 Personal access tokens 下的 Tokens (classic) 点击 Generate new token 选择 Generate new token (classic) 输入账号密码 Note下输入令牌备注（随便填，建议大写） Expiration 选择 no expiration （不过期） 勾选 repo 和 workflow 点击 Generate token 复制 ghp_xxx 内容（只显示一次） 10、添加存储库机密 #\r进入到自己的博客项目\n点击 Settings\n找到 Secrets and variables 下的 Actions\n点击 New repository secret\n输入 Name\n注意：Name 与 .github/workflows/hugo.yml 文件中的 github_token: ${{ secrets.HUGO_TOKEN }} 一致\n把刚才以 ghp_xxx 开头的token复制到 Secret 下\n点击 Add secret\n11、发布部署 #\r上传到远程仓库 main 分支中 会自动把 pulic 文件中的内容部署到 gh-pages 中\n在博客项目根目录下：右击——Git Bash Here\ngit add . git commit -m \u0026#34;Init Hugo Blog\u0026#34; # 描述上传的内容 git push origin main 12、博客访问地址 #\r项目地址：https://sizeskong.github.io\n域名地址：https://blog.kong.love\n注意：如果配置了域名，会自动跳转到域名地址，也可以直接访问域名地址。\nHugo 添加评论 #\rBlowfish 主题支持了在每篇文章底部添加一个评论功能。只需要提供一个 layouts/partials/comments.html 文件，并在其中添加显示评论的代码即可。\n启用主题的评论功能 #\r在配置文件 config\\_default\\params.toml中找到 [article] 下的 showComments 并设置参数为 true\n[article] showComments = true # 是否在文章末尾添加评论部分 启用 Discussions 讨论功能 #\r在仓库中选择 Settings\n往下翻 Discussions 勾选\n安装 Giscus app 评论 #\r选择存储库\n配置 Giscus 仓库 #\r复制代码，页面中使用\n添加评论页面 #\r在博客根目录 layouts\\partials 下添加 comments.html 文件\n\u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;\u0026#34; # 仓库地址 data-repo-id=\u0026#34;\u0026#34; # 仓库id data-category=\u0026#34;Announcements\u0026#34; # 分类名 data-category-id=\u0026#34;\u0026#34; # 分类id data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;top\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;zh-CN\u0026#34; data-loading=\u0026#34;lazy\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; 自定义评论功能 #\r修改主题评论布局 #\r复制主题中 **theme/blowfish/layouts/_default/ **下的 single.html文件到 博客根目录下 layouts/_default/\n找到以下这段代码\n{{ if .Params.showComments | default (.Site.Params.article.showComments | default false) }} {{ if templates.Exists \u0026#34;partials/comments.html\u0026#34; }} \u0026lt;div class=\u0026#34;pt-3\u0026#34;\u0026gt; \u0026lt;hr class=\u0026#34;border-dotted border-neutral-300 dark:border-neutral-600\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;pt-3\u0026#34;\u0026gt; {{ partial \u0026#34;comments.html\u0026#34; . }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ else }} {{ warnf \u0026#34;[BLOWFISH] Comments are enabled for %s but no comments partial exists.\u0026#34; .File.Path }} {{ end }} {{ end }} 将上面这段代码换成下面这样\n{{ if .Params.Comments.enable | default (.Site.Params.Comments.enable | default false) }} {{ $comment := .Params.Comments.provider | default .Site.Params.Comments.provider }} {{ $provider := print \u0026#34;partials/Comments/\u0026#34; $comment \u0026#34;.html\u0026#34; }} {{ if templates.Exists $provider }} \u0026lt;div class=\u0026#34;pt-3\u0026#34;\u0026gt; \u0026lt;hr class=\u0026#34;border-dotted border-neutral-300 dark:border-neutral-600\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;pt-3\u0026#34;\u0026gt; {{ partial $provider . }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ else }} {{ warnf \u0026#34;[BLOWFISH] Comments are enabled for %s but no $provider partial exists.\u0026#34; .File.Path }} {{ end }} {{ end }} 添加评论页面 #\r在博客目录下layouts/partials/ 创建一个Comments目录。 评论系统都放到这个目录下，按照评论系统名称命名。例如：giscus评论，则giscus.html 把刚才的 comments.html 文件 复制到 Comments 目录下 并重命名为 giscus.html 配置 Twikoo 评论 #\r在layouts/partials/Comments目录下创建一个twikoo.html文件 # 添加以下内容 \u0026lt;div id=\u0026#34;tcomment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/twikoo/{{ .Site.Params.twikoo.version }}/twikoo.all.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; twikoo.init({ envId: \u0026#39;https://xxx.vercel.app\u0026#39;, // Twikoo服务端地址 el: \u0026#39;#tcomment\u0026#39;, //lang: \u0026#39;zh-CN\u0026#39;, //region: \u0026#39;ap-shanghai\u0026#39;, //path: \u0026#39;pathname\u0026#39;, }); \u0026lt;/script\u0026gt; 配置 Waline 评论 #\r在layouts/partials/Comments目录下创建一个waline.html文件 \u0026lt;link href=\u0026#34;https://unpkg.com/@waline/client@v3/dist/waline.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/@waline/client@v3/dist/waline.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import { init } from \u0026#39;https://unpkg.com/@waline/client@v3/dist/waline.js\u0026#39;; init({ el: \u0026#39;#waline\u0026#39;, meta: [\u0026#39;nick\u0026#39;,\u0026#39;mail\u0026#39;,\u0026#39;link\u0026#39;], // 评论属性 requiredMeta: [\u0026#39;nick\u0026#39;,\u0026#39;mail\u0026#39;], // 必填项，昵称与邮件 login: \u0026#39;force\u0026#39;, // 登录后访问 comment: true, // 评论数统计 placeholder: \u0026#39;欢迎评论\u0026#39;, // 评论框占位提示符 serverURL: \u0026#34;https://xxx.vercel.app\u0026#34;, // Waline 服务端地址 avatar: \u0026#34;wavatar\u0026#34;, // 头像 avatarCDN: \u0026#34;https://sdn.geekzu.org/avatar/\u0026#34;, // 头像cdn pageSize: 10, // 评论每页条数 lang: \u0026#34;zh-CN\u0026#34;, // 语言 visitor: true, // 文章访问量统计 highlight: true, // 代码高亮 uploadImage: false, // 评论上传图片功能 emoji: \u0026#34;https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/weibo\u0026#34; // emoji 表情包 }) \u0026lt;/script\u0026gt; 添加评论配置 #\r编辑配置文件config/_default/params.toml # 在空白处添加以下内容 # 全局评论配置 [Comments] # 是否开启文章评论,不建议全局开启，可在有需要页面开启。 enable = true # 全局指定文章评论 giscus |twikoo |waline provider = \u0026#34;giscus\u0026#34; 在文章中也可以控制评论系统，只需要在 font matter 处添加 Comments: provider: \u0026#34;waline\u0026#34; 修改主题页面布局 #\r在博客目录下layouts/_default/ 添加一个list.html文件 复制 theme/blowfish/layouts/_default/list.html 到 layouts/_default/ 编辑 list.html 文件 # 在 {{ partial \u0026#34;pagination.html\u0026#34; . }} 这行的下面添加以下内容 {{ if .Params.pageComments.enable | default (.Site.Params.pageComments.enable | default false) }} {{ $comment := .Params.pageComments.provider | default .Site.Params.Comments.provider }} {{ $provider := print \u0026#34;partials/Comments/\u0026#34; $comment \u0026#34;.html\u0026#34; }} {{ if templates.Exists $provider }} \u0026lt;div class=\u0026#34;pt-3\u0026#34;\u0026gt; \u0026lt;hr class=\u0026#34;border-dotted border-neutral-300 dark:border-neutral-600\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;pt-3\u0026#34;\u0026gt; {{ partial $provider . }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ else }} {{ warnf \u0026#34;[BLOWFISH] Comments are enabled for %s but no $provider partial exists.\u0026#34; .File.Path }} {{ end }} {{ end }} 修改配置文件 #\r编辑配置文件config/_default/params.toml # 在空白处添加以下内容 pageComments # 是否开启分页评论。不建议全局开启，可在有需要页面开启。 enable = false Font Matter 填写 #\r文章级别index.md\n# 开启 --- Comments: enable: true # 如果全局已开启，这条可以忽略 provider: \u0026#34;twikoo\u0026#34; --- # 关闭 --- Comments: enable: false --- 页面级别_index.md\n# 开启 --- pageComments: enable: true provider: \u0026#34;giscus\u0026#34; --- # 关闭 --- pageComments: enable: false --- Giscus 官网：https://giscus.app/zh-CN\n填写仓库：sizeskong/sizeskong.github.io\n页面映射关系：Discussion 的标题包含页面的 pathname\nDiscussion 分类：Announcements\n往下滑，找到配置文件。记下data-repo，data-repo-id，data-category，data-category-id，data-mapping这几个值\n\u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo=\u0026#34;sizeskong/sizeskong.github.io\u0026#34; data-repo-id=\u0026#34;R_kgDOMM_icA\u0026#34; data-category=\u0026#34;Announcements\u0026#34; data-category-id=\u0026#34;DIC_kwDOMM_icM4CgVvk\u0026#34; data-mapping=\u0026#34;pathname\u0026#34; data-strict=\u0026#34;0\u0026#34; data-reactions-enabled=\u0026#34;1\u0026#34; data-emit-metadata=\u0026#34;0\u0026#34; data-input-position=\u0026#34;top\u0026#34; data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;zh-CN\u0026#34; data-loading=\u0026#34;lazy\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; ","date":"2024-06-20","externalUrl":null,"permalink":"/posts/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","section":"Posts","summary":"","title":"Hugo博客搭建","type":"posts"},{"content":"","date":"2024-06-20","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"0001-01-01","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]